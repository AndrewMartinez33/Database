class Searchbox {
    constructor(options) {
        // options the user can pass in
        this.searchboxNode = options.searchbox_node;
        this.dropdown_close_on_click = options.dropdown_close_on_click || false;
        this.sortable = options.dropdown_sortable || true;
        this.multiselectable = options.dropdown_multiselectable || false;
        this.searchInputCallback = options.search_input_callback || function () { };
        this.selectedItemsCallback = options.selected_items_callback || function () { };
        this.searchboxName = options.searchbox_name || '';
        this.searchboxInfo = options.searchbox_info || '';
        this.searchboxHideLabel = options.searchbox_hide_label || false;
        this.searchboxPlaceholder = options.searchbox_placeholder || '';
        this.searchboxForm = options.searchbox_form || null;
        

        this.searchbox_element_id = this.searchboxNode.id;
        this.create_searchbox();
        this.sortAscBtn = document.getElementById(`${this.searchbox_element_id}-sort-asc-btn`);
        this.sortDescBtn = document.getElementById(`${this.searchbox_element_id}-sort-desc-btn`);
        this.dropdownNode = document.getElementById(`${this.searchbox_element_id}-results`);
        this.addEmptyDropdownItem();
        this.searchboxInputNode = document.getElementById(`${this.searchbox_element_id}-input`);
        this.activeDescendant = this.dropdownNode.getAttribute('aria-activedescendant') || null;
        this.moveUpDownEnabled = false;
        this.siblingList = null;
        this.startRangeIndex = 0;
        this.upButton = null;
        this.downButton = null;
        this.moveButton = null;
        this.keysSoFar = '';
        this.handleItemChange = function () { };
        this.handleFocusChange = function () { };
        this.registerEvents();
    }

    registerEvents() {
        this.dropdownNode.addEventListener('focus', this.setupFocus.bind(this));
        this.dropdownNode.addEventListener('keydown', this.checkKeyPress.bind(this));
        this.dropdownNode.addEventListener('click', this.checkClickItem.bind(this));
        
        this.searchboxNode.addEventListener('input', this.searchInput.bind(this));
        this.sortAscBtn.addEventListener('click', this.sort_asc.bind(this));
        this.sortDescBtn.addEventListener('click', this.sort_desc.bind(this));
        this.searchboxInputNode.addEventListener('focus', this.inputFocus.bind(this));

        if (!this.documentHasEventListener('searchbox-click-outside')) {
            document.addEventListener('click', this.checkClickOutside.bind(this), {id: 'searchbox-click-outside'});
        }

        if (this.multiselectable) {
            this.dropdownNode.addEventListener(
                'mousedown',
                this.checkMouseDown.bind(this)
            );
        }
    }

    documentHasEventListener(id) {
        const eventListeners = document.eventListeners || [];
        for (let i = 0; i < eventListeners.length; i++) {
            const eventListener = eventListeners[i];
            if (eventListener.id === id) {
                return true;
            }
        }
        return false;
    }

    checkClickOutside(event) {
        const elements = document.querySelectorAll(`.search-dropdown`);
        
        for (const element of elements) {
            const input = document.getElementById(`${element.getAttribute("for")}`)
            if (!element.contains(event.target) && event.target != input) {
                element.style.display = 'none';
            }
        }
    }

    inputFocus() {
        const dropdown = this.dropdownNode.parentElement;
        console.log(dropdown);
        // Show the dropdown
        dropdown.style.display = 'block';
    }

    searchInput(user_input) {
        const dropdown_items = this.searchInputCallback(user_input.target.value);
        this.deleteItems(true)
        this.addItems(dropdown_items)
        
        const dropdown = this.dropdownNode.parentElement;
        // Show the dropdown
        dropdown.style.display = 'block';

        // Position the dropdown below the search box
        const rect = this.searchboxNode.getBoundingClientRect();
        dropdown.style.top = `${rect.height+1}px`;
        const computedStyle = window.getComputedStyle(this.searchboxNode);
        const paddingLeft = computedStyle.getPropertyValue('padding-left'); 
        dropdown.style.left = paddingLeft;
        const paddingRight = computedStyle.getPropertyValue('padding-right');
        dropdown.style.width = `calc(100% - ${paddingLeft} - ${paddingRight})`;
    }

    deepSort(data, direction = 'asc', key) {
        // Helper function to get the value of a nested key
        const getNestedValue = (obj, key) => {
            return key.split('.').reduce((acc, part) => acc && acc[part], obj);
        };

        // Perform a deep copy of the array
        const copiedData = structuredClone(data);

        // Prepare an array of values for sorting, to avoid recomputing for each comparison
        const sortedData = copiedData.map(item => {
            return {
                item, // store original item
                value: getNestedValue(item, key) // store the value at the nested key
            };
        });

        // Sort based on the cached nested values
        sortedData.sort((a, b) => {
            const valueA = a.value;
            const valueB = b.value;

            if (valueA < valueB) {
                return direction === 'asc' ? -1 : 1;
            }
            if (valueA > valueB) {
                return direction === 'asc' ? 1 : -1;
            }
            return 0;
        });

        // Return the sorted array using the stored item references
        return sortedData.map(sortedItem => sortedItem.item);
    }


    sort_asc() {
        const data = [];
        Array.from(this.dropdownNode.children).forEach(function (option){
            data.push({ option: option.outerHTML, sortvalue: option.dataset.sortvalue });
        });
        
        const sortedData = this.deepSort(data, 'asc', 'sortvalue');

        let html = '';

        sortedData.forEach(function (sorted_item){
            html += sorted_item.option;
        });

        this.dropdownNode.innerHTML = html;
        
    }

    sort_desc() {
        const data = [];
        Array.from(this.dropdownNode.children).forEach(function (option){
            data.push({ option: option.outerHTML, sortvalue: option.dataset.sortvalue });
        });
        
        const sortedData = this.deepSort(data, 'desc', 'sortvalue');

        let html = '';

        sortedData.forEach(function (sorted_item){
            html += sorted_item.option;
        });

        this.dropdownNode.innerHTML = html;
    }

    create_searchbox() {
        const sorthtml = `
            <button id="${this.searchbox_element_id}-sort-asc-btn" class="searchbox-sort-btn" type='button' >
                Sort Ascending
            </button>
            <button id="${this.searchbox_element_id}-sort-desc-btn" class="searchbox-sort-btn" type='button' >
                Sort Descending
            </button>
        `
        const infohtml = `<span class="question-icon" data-bs-toggle="tooltip" data-bs-placement="bottom" title="${this.searchboxInfo}">?</span>`
        
        this.searchboxNode.innerHTML = `
            <label for="${this.searchbox_element_id}-input" class="form-label" ${(this.searchboxHideLabel) ? 'style="visibility: hidden;"': ''}>${this.searchboxName}</label>
            ${(this.searchboxInfo) ? infohtml : ''}
            <input type="text" class="form-control" id="${this.searchbox_element_id}-input" placeholder="${this.searchboxPlaceholder}">
            <div id="${this.searchbox_element_id}-dropdown" class="search-dropdown" for="${this.searchbox_element_id}-input">
                ${(this.sortable) ? sorthtml : ''}
                <ul id="${this.searchbox_element_id}-results" tabindex="0" ${(this.multiselectable) ? 'aria-multiselectable="true"' : ''} role="listbox">
                </ul>
            </div>
        `;

    }

    addEmptyDropdownItem() {
        let li = document.createElement('li');
        li.setAttribute('role', 'option')
        li.setAttribute('no-results', 'true')
        li.classList.add('listbox-item')
        li.textContent = 'No Results Found';
        this.dropdownNode.appendChild(li);
    }

    setupFocus() {
        if (this.activeDescendant) {
            const listitem = document.getElementById(this.activeDescendant);
            listitem.scrollIntoView({ block: 'nearest', inline: 'nearest' });
        } else {
            this.focusFirstItem();
        }
    }

    focusFirstItem() {
        var firstItem = this.dropdownNode.querySelector('[role="option"]');

        if (firstItem) {
            this.focusItem(firstItem);
        }
    }

    focusLastItem() {
        const itemList = this.dropdownNode.querySelectorAll('[role="option"]');

        if (itemList.length) {
            this.focusItem(itemList[itemList.length - 1]);
        }
    }

    checkKeyPress(evt) {
        const lastActiveId = this.activeDescendant;
        const allOptions = this.dropdownNode.querySelectorAll('[role="option"]');
        const currentItem =
            document.getElementById(this.activeDescendant) || allOptions[0];
        let nextItem = currentItem;

        if (!currentItem) {
            return;
        }

        switch (evt.key) {
            case 'PageUp':
            case 'PageDown':
                evt.preventDefault();
                if (this.moveUpDownEnabled) {
                    if (evt.key === 'PageUp') {
                        this.moveUpItems();
                    } else {
                        this.moveDownItems();
                    }
                }

                break;
            case 'ArrowUp':
            case 'ArrowDown':
                evt.preventDefault();
                if (!this.activeDescendant) {
                    // focus first option if no option was previously focused, and perform no other actions
                    this.focusItem(currentItem);
                    break;
                }

                if (this.moveUpDownEnabled && evt.altKey) {
                    evt.preventDefault();
                    if (evt.key === 'ArrowUp') {
                        this.moveUpItems();
                    } else {
                        this.moveDownItems();
                    }
                    this.updateScroll();
                    return;
                }

                if (evt.key === 'ArrowUp') {
                    nextItem = this.findPreviousOption(currentItem);
                } else {
                    nextItem = this.findNextOption(currentItem);
                }

                if (nextItem && this.multiselectable && event.shiftKey) {
                    this.selectRange(this.startRangeIndex, nextItem);
                }

                if (nextItem) {
                    this.focusItem(nextItem);
                }

                break;

            case 'Home':
                evt.preventDefault();
                this.focusFirstItem();

                if (this.multiselectable && evt.shiftKey && evt.ctrlKey) {
                    this.selectRange(this.startRangeIndex, 0);
                }
                break;

            case 'End':
                evt.preventDefault();
                this.focusLastItem();

                if (this.multiselectable && evt.shiftKey && evt.ctrlKey) {
                    this.selectRange(this.startRangeIndex, allOptions.length - 1);
                }
                break;

            case 'Shift':
                this.startRangeIndex = this.getElementIndex(currentItem, allOptions);
                break;

            case ' ':
                evt.preventDefault();
                this.toggleSelectItem(nextItem);
                break;

            case 'Backspace':
            case 'Delete':
            case 'Enter':
                if (!this.moveButton) {
                    return;
                }

                var keyshortcuts = this.moveButton.getAttribute('aria-keyshortcuts');
                if (evt.key === 'Enter' && keyshortcuts.indexOf('Enter') === -1) {
                    return;
                }
                if (
                    (evt.key === 'Backspace' || evt.key === 'Delete') &&
                    keyshortcuts.indexOf('Delete') === -1
                ) {
                    return;
                }

                evt.preventDefault();

                var nextUnselected = nextItem.nextElementSibling;
                while (nextUnselected) {
                    if (nextUnselected.getAttribute('aria-selected') != 'true') {
                        break;
                    }
                    nextUnselected = nextUnselected.nextElementSibling;
                }
                if (!nextUnselected) {
                    nextUnselected = nextItem.previousElementSibling;
                    while (nextUnselected) {
                        if (nextUnselected.getAttribute('aria-selected') != 'true') {
                            break;
                        }
                        nextUnselected = nextUnselected.previousElementSibling;
                    }
                }

                this.moveItems();

                if (!this.activeDescendant && nextUnselected) {
                    this.focusItem(nextUnselected);
                }
                break;

            case 'A':
            case 'a':
                // handle control + A
                if (evt.ctrlKey || evt.metaKey) {
                    if (this.multiselectable) {
                        this.selectRange(0, allOptions.length - 1);
                    }
                    evt.preventDefault();
                    break;
                }
            // fall through
            default:
                if (evt.key.length === 1) {
                    const itemToFocus = this.findItemToFocus(evt.key.toLowerCase());
                    if (itemToFocus) {
                        this.focusItem(itemToFocus);
                    }
                }
                break;
        }

        if (this.activeDescendant !== lastActiveId) {
            this.updateScroll();
        }
    }

    findItemToFocus(character) {
        const itemList = this.dropdownNode.querySelectorAll('[role="option"]');
        let searchIndex = 0;

        if (!this.keysSoFar) {
            for (let i = 0; i < itemList.length; i++) {
                if (itemList[i].getAttribute('id') == this.activeDescendant) {
                    searchIndex = i;
                }
            }
        }

        this.keysSoFar += character;
        this.clearKeysSoFarAfterDelay();

        let nextMatch = this.findMatchInRange(
            itemList,
            searchIndex + 1,
            itemList.length
        );

        if (!nextMatch) {
            nextMatch = this.findMatchInRange(itemList, 0, searchIndex);
        }
        return nextMatch;
    }

    /* Return the index of the passed element within the passed array, or null if not found */
    getElementIndex(option, options) {
        const allOptions = Array.prototype.slice.call(options); // convert to array
        const optionIndex = allOptions.indexOf(option);

        return typeof optionIndex === 'number' ? optionIndex : null;
    }

    /* Return the next listbox option, if it exists; otherwise, returns null */
    findNextOption(currentOption) {
        const allOptions = Array.prototype.slice.call(
            this.dropdownNode.querySelectorAll('[role="option"]')
        ); // get options array
        const currentOptionIndex = allOptions.indexOf(currentOption);
        let nextOption = null;

        if (currentOptionIndex > -1 && currentOptionIndex < allOptions.length - 1) {
            nextOption = allOptions[currentOptionIndex + 1];
        }

        return nextOption;
    }

    /* Return the previous listbox option, if it exists; otherwise, returns null */
    findPreviousOption(currentOption) {
        const allOptions = Array.prototype.slice.call(
            this.dropdownNode.querySelectorAll('[role="option"]')
        ); // get options array
        const currentOptionIndex = allOptions.indexOf(currentOption);
        let previousOption = null;

        if (currentOptionIndex > -1 && currentOptionIndex > 0) {
            previousOption = allOptions[currentOptionIndex - 1];
        }

        return previousOption;
    }

    clearKeysSoFarAfterDelay() {
        if (this.keyClear) {
            clearTimeout(this.keyClear);
            this.keyClear = null;
        }
        this.keyClear = setTimeout(
            function () {
                this.keysSoFar = '';
                this.keyClear = null;
            }.bind(this),
            500
        );
    }

    findMatchInRange(list, startIndex, endIndex) {
        // Find the first item starting with the keysSoFar substring, searching in
        // the specified range of items
        for (let n = startIndex; n < endIndex; n++) {
            const label = list[n].innerText;
            if (label && label.toLowerCase().indexOf(this.keysSoFar) === 0) {
                return list[n];
            }
        }
        return null;
    }

    checkClickItem(evt) {
        if (evt.target.getAttribute('role') !== 'option') {
            return;
        }

        this.focusItem(evt.target);
        this.toggleSelectItem(evt.target);
        this.updateScroll();

        if (this.multiselectable && evt.shiftKey) {
            this.selectRange(this.startRangeIndex, evt.target);
        }
    }

    /**
     * Prevent text selection on shift + click for multi-select listboxes
     *
     * @param evt
     */
    checkMouseDown(evt) {
        if (
            this.multiselectable &&
            evt.shiftKey &&
            evt.target.getAttribute('role') === 'option'
        ) {
            evt.preventDefault();
        }
    }

    /**
     * @description
     *  Toggle the aria-selected value
     * @param element
     *  The element to select
     */
    toggleSelectItem(element) {
        if (this.multiselectable) {
            element.setAttribute(
                'aria-selected',
                element.getAttribute('aria-selected') === 'true' ? 'false' : 'true'
            );

            this.updateMoveButton();
        }
    }

    /**
     * @description
     *  Defocus the specified item
     * @param element
     *  The element to defocus
     */
    defocusItem(element) {
        if (!element) {
            return;
        }
        if (!this.multiselectable) {
            element.removeAttribute('aria-selected');
        }
        element.classList.remove('focused');
    }

    /**
     * @description
     *  Focus on the specified item
     * @param element
     *  The element to focus
     */
    focusItem(element) {
        const notSetFocus = this.dropdownNode.querySelectorAll('[aria-selected="true"]').length;

        this.defocusItem(document.getElementById(this.activeDescendant));

        if (!this.multiselectable) {
            element.setAttribute('aria-selected', 'true');
        }
        element.classList.add('focused');
        this.dropdownNode.setAttribute('aria-activedescendant', element.id);
        this.activeDescendant = element.id;

        if (!this.multiselectable) {
            this.updateMoveButton();
        }

        this.checkUpDownButtons();
        this.handleFocusChange(element);


        const customEvent = new CustomEvent('Listbox:selected_items', {
            bubbles: true,
            detail: {
                message: 'listbox selected items',
                data: {
                    focused_items: this.dropdownNode.querySelectorAll(
                        '.focused'
                    ),
                    focused_item: element
                }
            }
        });

        if (!notSetFocus & !element.hasAttribute('no-results')) {
            this.dropdownNode.dispatchEvent(customEvent);
            this.selectedItemsCallback(this.dropdownNode.querySelectorAll(
                '.focused'
            ));
        }

        if (!notSetFocus && !this.multiselectable && this.dropdown_close_on_click){
            this.dropdownNode.parentElement.style.display = 'none';
        }
    
    }

    /**
     * Helper function to check if a number is within a range; no side effects.
     *
     * @param index
     * @param start
     * @param end
     * @returns {boolean}
     */
    checkInRange(index, start, end) {
        const rangeStart = start < end ? start : end;
        const rangeEnd = start < end ? end : start;

        return index >= rangeStart && index <= rangeEnd;
    }

    /**
     * Select a range of options
     *
     * @param start
     * @param end
     */
    selectRange(start, end) {
        // get start/end indices
        const allOptions = this.dropdownNode.querySelectorAll('[role="option"]');
        const startIndex =
            typeof start === 'number'
                ? start
                : this.getElementIndex(start, allOptions);
        const endIndex =
            typeof end === 'number' ? end : this.getElementIndex(end, allOptions);

        for (let index = 0; index < allOptions.length; index++) {
            const selected = this.checkInRange(index, startIndex, endIndex);
            allOptions[index].setAttribute('aria-selected', selected + '');
        }

        this.updateMoveButton();
    }

    /**
     * Check for selected options and update moveButton, if applicable
     */
    updateMoveButton() {
        if (!this.moveButton) {
            return;
        }

        if (this.dropdownNode.querySelector('[aria-selected="true"]')) {
            this.moveButton.setAttribute('aria-disabled', 'false');
        } else {
            this.moveButton.setAttribute('aria-disabled', 'true');
        }
    }

    /**
     * Check if the selected option is in view, and scroll if not
     */
    updateScroll() {
        const selectedOption = document.getElementById(this.activeDescendant);
        if (selectedOption) {
            const scrollBottom =
                this.dropdownNode.clientHeight + this.dropdownNode.scrollTop;
            const elementBottom =
                selectedOption.offsetTop + selectedOption.offsetHeight;
            if (elementBottom > scrollBottom) {
                this.dropdownNode.scrollTop =
                    elementBottom - this.dropdownNode.clientHeight;
            } else if (selectedOption.offsetTop < this.dropdownNode.scrollTop) {
                this.dropdownNode.scrollTop = selectedOption.offsetTop;
            }
            selectedOption.scrollIntoView({ block: 'nearest', inline: 'nearest' });
        }
    }

    /**
     * @description
     *  Enable/disable the up/down arrows based on the activeDescendant.
     */
    checkUpDownButtons() {
        const activeElement = document.getElementById(this.activeDescendant);

        if (!this.moveUpDownEnabled) {
            return;
        }

        if (!activeElement) {
            this.upButton.setAttribute('aria-disabled', 'true');
            this.downButton.setAttribute('aria-disabled', 'true');
            return;
        }

        if (this.upButton) {
            if (activeElement.previousElementSibling) {
                this.upButton.setAttribute('aria-disabled', false);
            } else {
                this.upButton.setAttribute('aria-disabled', 'true');
            }
        }

        if (this.downButton) {
            if (activeElement.nextElementSibling) {
                this.downButton.setAttribute('aria-disabled', false);
            } else {
                this.downButton.setAttribute('aria-disabled', 'true');
            }
        }
    }

    /**
     * @description
     *  Add the specified items to the listbox. Assumes items are valid options.
     * @param items
     *  An array of items to add to the listbox
     */
    addItems(items) {
        if (!items || !items.length) {
            return;
        }

        this.clearActiveDescendant();

        items.forEach(
            function (item) {
                this.defocusItem(item);
                this.dropdownNode.append(item);
            }.bind(this)
        );

        // if (!this.activeDescendant) {
        //     this.focusItem(items[0]);
        // }

        this.handleItemChange('added', items);
    }

    /**
     * @description
     *  Remove all of the selected items from the listbox; Removes the focused items
     *  in a single select listbox and the items with aria-selected in a multi
     *  select listbox.
     * @returns {Array}
     *  An array of items that were removed from the listbox
     */
    deleteItems(delete_all = false) {
        let itemsToDelete;

        if (delete_all) {
            itemsToDelete = this.dropdownNode.querySelectorAll('.listbox-item');
        } else if (this.multiselectable) {
            itemsToDelete = this.dropdownNode.querySelectorAll(
                '[aria-selected="true"]'
            );
        } else if (this.activeDescendant) {
            itemsToDelete = [document.getElementById(this.activeDescendant)];
        }

        if (!itemsToDelete || !itemsToDelete.length) {
            return [];
        }

        itemsToDelete.forEach(
            function (item) {
                item.remove();

                if (item.id === this.activeDescendant) {
                    this.clearActiveDescendant();
                }
            }.bind(this)
        );

        this.handleItemChange('removed', itemsToDelete);

        return itemsToDelete;
    }

    clearActiveDescendant() {
        this.activeDescendant = null;
        this.dropdownNode.setAttribute('aria-activedescendant', null);

        this.updateMoveButton();
        this.checkUpDownButtons();
    }

    /**
     * @description
     *  Shifts the currently focused item up on the list. No shifting occurs if the
     *  item is already at the top of the list.
     */
    moveUpItems() {
        if (!this.activeDescendant) {
            return;
        }

        const currentItem = document.getElementById(this.activeDescendant);
        const previousItem = currentItem.previousElementSibling;

        if (previousItem) {
            this.dropdownNode.insertBefore(currentItem, previousItem);
            this.handleItemChange('moved_up', [currentItem]);
        }

        this.checkUpDownButtons();
    }

    /**
     * @description
     *  Shifts the currently focused item down on the list. No shifting occurs if
     *  the item is already at the end of the list.
     */
    moveDownItems() {
        if (!this.activeDescendant) {
            return;
        }

        var currentItem = document.getElementById(this.activeDescendant);
        var nextItem = currentItem.nextElementSibling;

        if (nextItem) {
            this.dropdownNode.insertBefore(nextItem, currentItem);
            this.handleItemChange('moved_down', [currentItem]);
        }

        this.checkUpDownButtons();
    }

    /**
     * @description
     *  Delete the currently selected items and add them to the sibling list.
     */
    moveItems() {
        if (!this.siblingList) {
            return;
        }

        var itemsToMove = this.deleteItems();
        this.siblingList.addItems(itemsToMove);
    }

    /**
     * @description
     *  Enable Up/Down controls to shift items up and down.
     * @param upButton
     *   Up button to trigger up shift
     * @param downButton
     *   Down button to trigger down shift
     */
    enableMoveUpDown(upButton, downButton) {
        this.moveUpDownEnabled = true;
        this.upButton = upButton;
        this.downButton = downButton;
        upButton.addEventListener('click', this.moveUpItems.bind(this));
        downButton.addEventListener('click', this.moveDownItems.bind(this));
    }

    /**
     * @description
     *  Enable Move controls. Moving removes selected items from the current
     *  list and adds them to the sibling list.
     * @param button
     *   Move button to trigger delete
     * @param siblingList
     *   Listbox to move items to
     */
    setupMove(button, siblingList) {
        this.siblingList = siblingList;
        this.moveButton = button;
        button.addEventListener('click', this.moveItems.bind(this));
    }

    setHandleItemChange(handlerFn) {
        this.handleItemChange = handlerFn;
    }

    setHandleFocusChange(focusChangeHandler) {
        this.handleFocusChange = focusChangeHandler;
    }
};

export default Searchbox;
